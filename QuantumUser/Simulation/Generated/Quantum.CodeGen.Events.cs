// <auto-generated>
// This code was auto-generated by a tool, every time
// the tool executes this code will be reset.
//
// If you need to extend the classes generated to add
// fields or methods to them, please create partial
// declarations in another file.
// </auto-generated>
#pragma warning disable 0109
#pragma warning disable 1591


namespace Quantum {
  using Photon.Deterministic;
  using Quantum;
  using Quantum.Core;
  using Quantum.Collections;
  using Quantum.Inspector;
  using Quantum.Physics2D;
  using Quantum.Physics3D;
  using Byte = System.Byte;
  using SByte = System.SByte;
  using Int16 = System.Int16;
  using UInt16 = System.UInt16;
  using Int32 = System.Int32;
  using UInt32 = System.UInt32;
  using Int64 = System.Int64;
  using UInt64 = System.UInt64;
  using Boolean = System.Boolean;
  using String = System.String;
  using Object = System.Object;
  using FlagsAttribute = System.FlagsAttribute;
  using SerializableAttribute = System.SerializableAttribute;
  using MethodImplAttribute = System.Runtime.CompilerServices.MethodImplAttribute;
  using MethodImplOptions = System.Runtime.CompilerServices.MethodImplOptions;
  using FieldOffsetAttribute = System.Runtime.InteropServices.FieldOffsetAttribute;
  using StructLayoutAttribute = System.Runtime.InteropServices.StructLayoutAttribute;
  using LayoutKind = System.Runtime.InteropServices.LayoutKind;
  #if QUANTUM_UNITY //;
  using TooltipAttribute = UnityEngine.TooltipAttribute;
  using HeaderAttribute = UnityEngine.HeaderAttribute;
  using SpaceAttribute = UnityEngine.SpaceAttribute;
  using RangeAttribute = UnityEngine.RangeAttribute;
  using HideInInspectorAttribute = UnityEngine.HideInInspector;
  using PreserveAttribute = UnityEngine.Scripting.PreserveAttribute;
  using FormerlySerializedAsAttribute = UnityEngine.Serialization.FormerlySerializedAsAttribute;
  using MovedFromAttribute = UnityEngine.Scripting.APIUpdating.MovedFromAttribute;
  using CreateAssetMenu = UnityEngine.CreateAssetMenuAttribute;
  using RuntimeInitializeOnLoadMethodAttribute = UnityEngine.RuntimeInitializeOnLoadMethodAttribute;
  #endif //;
  
  public unsafe partial class Frame {
    public unsafe partial struct FrameEvents {
      static partial void GetEventTypeCountCodeGen(ref Int32 eventCount) {
        eventCount = 20;
      }
      static partial void GetParentEventIDCodeGen(Int32 eventID, ref Int32 parentEventID) {
        switch (eventID) {
          default: break;
        }
      }
      static partial void GetEventTypeCodeGen(Int32 eventID, ref System.Type result) {
        switch (eventID) {
          case EventOnCarrotCollected.ID: result = typeof(EventOnCarrotCollected); return;
          case EventOnDriftStart.ID: result = typeof(EventOnDriftStart); return;
          case EventOnDriftEnd.ID: result = typeof(EventOnDriftEnd); return;
          case EventOnBoostStart.ID: result = typeof(EventOnBoostStart); return;
          case EventOnBoostEnd.ID: result = typeof(EventOnBoostEnd); return;
          case EventOnHitStart.ID: result = typeof(EventOnHitStart); return;
          case EventOnHitEnd.ID: result = typeof(EventOnHitEnd); return;
          case EventOnImmunityStart.ID: result = typeof(EventOnImmunityStart); return;
          case EventOnImmunityEnd.ID: result = typeof(EventOnImmunityEnd); return;
          case EventLocalPlayerReady.ID: result = typeof(EventLocalPlayerReady); return;
          case EventOnRaceStateChanged.ID: result = typeof(EventOnRaceStateChanged); return;
          case EventOnCountdownStart.ID: result = typeof(EventOnCountdownStart); return;
          case EventOnRaceStart.ID: result = typeof(EventOnRaceStart); return;
          case EventOnFirstPlayerFinish.ID: result = typeof(EventOnFirstPlayerFinish); return;
          case EventOnRaceOver.ID: result = typeof(EventOnRaceOver); return;
          case EventOnPositionsUpdated.ID: result = typeof(EventOnPositionsUpdated); return;
          case EventOnPlayerCompletedLap.ID: result = typeof(EventOnPlayerCompletedLap); return;
          case EventOnPlayerFinished.ID: result = typeof(EventOnPlayerFinished); return;
          case EventOnWrongWayChanged.ID: result = typeof(EventOnWrongWayChanged); return;
          default: break;
        }
      }
      public EventOnCarrotCollected OnCarrotCollected(EntityRef CarrotEntity) {
        var ev = _f.Context.AcquireEvent<EventOnCarrotCollected>(EventOnCarrotCollected.ID);
        ev.CarrotEntity = CarrotEntity;
        _f.AddEvent(ev);
        return ev;
      }
      public EventOnDriftStart OnDriftStart(EntityRef kartEntity, Drifting driftComp) {
        var ev = _f.Context.AcquireEvent<EventOnDriftStart>(EventOnDriftStart.ID);
        ev.kartEntity = kartEntity;
        ev.driftComp = driftComp;
        _f.AddEvent(ev);
        return ev;
      }
      public EventOnDriftEnd OnDriftEnd(EntityRef kartEntity, Drifting driftComp) {
        var ev = _f.Context.AcquireEvent<EventOnDriftEnd>(EventOnDriftEnd.ID);
        ev.kartEntity = kartEntity;
        ev.driftComp = driftComp;
        _f.AddEvent(ev);
        return ev;
      }
      public EventOnBoostStart OnBoostStart(EntityRef kartEntity, KartBoost kartBoost) {
        var ev = _f.Context.AcquireEvent<EventOnBoostStart>(EventOnBoostStart.ID);
        ev.kartEntity = kartEntity;
        ev.kartBoost = kartBoost;
        _f.AddEvent(ev);
        return ev;
      }
      public EventOnBoostEnd OnBoostEnd(EntityRef kartEntity, KartBoost kartBoost) {
        var ev = _f.Context.AcquireEvent<EventOnBoostEnd>(EventOnBoostEnd.ID);
        ev.kartEntity = kartEntity;
        ev.kartBoost = kartBoost;
        _f.AddEvent(ev);
        return ev;
      }
      public EventOnHitStart OnHitStart(EntityRef kartEntity) {
        var ev = _f.Context.AcquireEvent<EventOnHitStart>(EventOnHitStart.ID);
        ev.kartEntity = kartEntity;
        _f.AddEvent(ev);
        return ev;
      }
      public EventOnHitEnd OnHitEnd(EntityRef kartEntity) {
        var ev = _f.Context.AcquireEvent<EventOnHitEnd>(EventOnHitEnd.ID);
        ev.kartEntity = kartEntity;
        _f.AddEvent(ev);
        return ev;
      }
      public EventOnImmunityStart OnImmunityStart(EntityRef kartEntity) {
        var ev = _f.Context.AcquireEvent<EventOnImmunityStart>(EventOnImmunityStart.ID);
        ev.kartEntity = kartEntity;
        _f.AddEvent(ev);
        return ev;
      }
      public EventOnImmunityEnd OnImmunityEnd(EntityRef kartEntity) {
        var ev = _f.Context.AcquireEvent<EventOnImmunityEnd>(EventOnImmunityEnd.ID);
        ev.kartEntity = kartEntity;
        _f.AddEvent(ev);
        return ev;
      }
      public EventLocalPlayerReady LocalPlayerReady(PlayerRef player, QBoolean ready) {
        if (_f.Context.IsLocalPlayer(player) == false) return null;
        var ev = _f.Context.AcquireEvent<EventLocalPlayerReady>(EventLocalPlayerReady.ID);
        ev.player = player;
        ev.ready = ready;
        _f.AddEvent(ev);
        return ev;
      }
      public EventOnRaceStateChanged OnRaceStateChanged(RaceState state) {
        if (_f.IsPredicted) return null;
        var ev = _f.Context.AcquireEvent<EventOnRaceStateChanged>(EventOnRaceStateChanged.ID);
        ev.state = state;
        _f.AddEvent(ev);
        return ev;
      }
      public EventOnCountdownStart OnCountdownStart(FP Time) {
        if (_f.IsPredicted) return null;
        var ev = _f.Context.AcquireEvent<EventOnCountdownStart>(EventOnCountdownStart.ID);
        ev.Time = Time;
        _f.AddEvent(ev);
        return ev;
      }
      public EventOnRaceStart OnRaceStart() {
        if (_f.IsPredicted) return null;
        var ev = _f.Context.AcquireEvent<EventOnRaceStart>(EventOnRaceStart.ID);
        _f.AddEvent(ev);
        return ev;
      }
      public EventOnFirstPlayerFinish OnFirstPlayerFinish(EntityRef entityRef) {
        if (_f.IsPredicted) return null;
        var ev = _f.Context.AcquireEvent<EventOnFirstPlayerFinish>(EventOnFirstPlayerFinish.ID);
        ev.entityRef = entityRef;
        _f.AddEvent(ev);
        return ev;
      }
      public EventOnRaceOver OnRaceOver() {
        if (_f.IsPredicted) return null;
        var ev = _f.Context.AcquireEvent<EventOnRaceOver>(EventOnRaceOver.ID);
        _f.AddEvent(ev);
        return ev;
      }
      public EventOnPositionsUpdated OnPositionsUpdated() {
        if (_f.IsPredicted) return null;
        var ev = _f.Context.AcquireEvent<EventOnPositionsUpdated>(EventOnPositionsUpdated.ID);
        _f.AddEvent(ev);
        return ev;
      }
      public EventOnPlayerCompletedLap OnPlayerCompletedLap(EntityRef entityRef) {
        if (_f.IsPredicted) return null;
        var ev = _f.Context.AcquireEvent<EventOnPlayerCompletedLap>(EventOnPlayerCompletedLap.ID);
        ev.entityRef = entityRef;
        _f.AddEvent(ev);
        return ev;
      }
      public EventOnPlayerFinished OnPlayerFinished(EntityRef entityRef) {
        if (_f.IsPredicted) return null;
        var ev = _f.Context.AcquireEvent<EventOnPlayerFinished>(EventOnPlayerFinished.ID);
        ev.entityRef = entityRef;
        _f.AddEvent(ev);
        return ev;
      }
      public EventOnWrongWayChanged OnWrongWayChanged(PlayerRef player, QBoolean wrongWay) {
        if (_f.Context.IsLocalPlayer(player) == false) return null;
        var ev = _f.Context.AcquireEvent<EventOnWrongWayChanged>(EventOnWrongWayChanged.ID);
        ev.player = player;
        ev.wrongWay = wrongWay;
        _f.AddEvent(ev);
        return ev;
      }
    }
  }
  public unsafe partial class EventOnCarrotCollected : EventBase {
    public new const Int32 ID = 1;
    public EntityRef CarrotEntity;
    protected EventOnCarrotCollected(Int32 id, EventFlags flags) : 
        base(id, flags) {
    }
    public EventOnCarrotCollected() : 
        base(1, EventFlags.Server|EventFlags.Client) {
    }
    public new QuantumGame Game {
      get {
        return (QuantumGame)base.Game;
      }
      set {
        base.Game = value;
      }
    }
    public override Int32 GetHashCode() {
      unchecked {
        var hash = 41;
        hash = hash * 31 + CarrotEntity.GetHashCode();
        return hash;
      }
    }
  }
  public unsafe partial class EventOnDriftStart : EventBase {
    public new const Int32 ID = 2;
    public EntityRef kartEntity;
    public Drifting driftComp;
    protected EventOnDriftStart(Int32 id, EventFlags flags) : 
        base(id, flags) {
    }
    public EventOnDriftStart() : 
        base(2, EventFlags.Server|EventFlags.Client) {
    }
    public new QuantumGame Game {
      get {
        return (QuantumGame)base.Game;
      }
      set {
        base.Game = value;
      }
    }
    public override Int32 GetHashCode() {
      unchecked {
        var hash = 43;
        hash = hash * 31 + kartEntity.GetHashCode();
        hash = hash * 31 + driftComp.GetHashCode();
        return hash;
      }
    }
  }
  public unsafe partial class EventOnDriftEnd : EventBase {
    public new const Int32 ID = 3;
    public EntityRef kartEntity;
    public Drifting driftComp;
    protected EventOnDriftEnd(Int32 id, EventFlags flags) : 
        base(id, flags) {
    }
    public EventOnDriftEnd() : 
        base(3, EventFlags.Server|EventFlags.Client) {
    }
    public new QuantumGame Game {
      get {
        return (QuantumGame)base.Game;
      }
      set {
        base.Game = value;
      }
    }
    public override Int32 GetHashCode() {
      unchecked {
        var hash = 47;
        hash = hash * 31 + kartEntity.GetHashCode();
        hash = hash * 31 + driftComp.GetHashCode();
        return hash;
      }
    }
  }
  public unsafe partial class EventOnBoostStart : EventBase {
    public new const Int32 ID = 4;
    public EntityRef kartEntity;
    public KartBoost kartBoost;
    protected EventOnBoostStart(Int32 id, EventFlags flags) : 
        base(id, flags) {
    }
    public EventOnBoostStart() : 
        base(4, EventFlags.Server|EventFlags.Client) {
    }
    public new QuantumGame Game {
      get {
        return (QuantumGame)base.Game;
      }
      set {
        base.Game = value;
      }
    }
    public override Int32 GetHashCode() {
      unchecked {
        var hash = 53;
        hash = hash * 31 + kartEntity.GetHashCode();
        hash = hash * 31 + kartBoost.GetHashCode();
        return hash;
      }
    }
  }
  public unsafe partial class EventOnBoostEnd : EventBase {
    public new const Int32 ID = 5;
    public EntityRef kartEntity;
    public KartBoost kartBoost;
    protected EventOnBoostEnd(Int32 id, EventFlags flags) : 
        base(id, flags) {
    }
    public EventOnBoostEnd() : 
        base(5, EventFlags.Server|EventFlags.Client) {
    }
    public new QuantumGame Game {
      get {
        return (QuantumGame)base.Game;
      }
      set {
        base.Game = value;
      }
    }
    public override Int32 GetHashCode() {
      unchecked {
        var hash = 59;
        hash = hash * 31 + kartEntity.GetHashCode();
        hash = hash * 31 + kartBoost.GetHashCode();
        return hash;
      }
    }
  }
  public unsafe partial class EventOnHitStart : EventBase {
    public new const Int32 ID = 6;
    public EntityRef kartEntity;
    protected EventOnHitStart(Int32 id, EventFlags flags) : 
        base(id, flags) {
    }
    public EventOnHitStart() : 
        base(6, EventFlags.Server|EventFlags.Client) {
    }
    public new QuantumGame Game {
      get {
        return (QuantumGame)base.Game;
      }
      set {
        base.Game = value;
      }
    }
    public override Int32 GetHashCode() {
      unchecked {
        var hash = 61;
        hash = hash * 31 + kartEntity.GetHashCode();
        return hash;
      }
    }
  }
  public unsafe partial class EventOnHitEnd : EventBase {
    public new const Int32 ID = 7;
    public EntityRef kartEntity;
    protected EventOnHitEnd(Int32 id, EventFlags flags) : 
        base(id, flags) {
    }
    public EventOnHitEnd() : 
        base(7, EventFlags.Server|EventFlags.Client) {
    }
    public new QuantumGame Game {
      get {
        return (QuantumGame)base.Game;
      }
      set {
        base.Game = value;
      }
    }
    public override Int32 GetHashCode() {
      unchecked {
        var hash = 67;
        hash = hash * 31 + kartEntity.GetHashCode();
        return hash;
      }
    }
  }
  public unsafe partial class EventOnImmunityStart : EventBase {
    public new const Int32 ID = 8;
    public EntityRef kartEntity;
    protected EventOnImmunityStart(Int32 id, EventFlags flags) : 
        base(id, flags) {
    }
    public EventOnImmunityStart() : 
        base(8, EventFlags.Server|EventFlags.Client) {
    }
    public new QuantumGame Game {
      get {
        return (QuantumGame)base.Game;
      }
      set {
        base.Game = value;
      }
    }
    public override Int32 GetHashCode() {
      unchecked {
        var hash = 71;
        hash = hash * 31 + kartEntity.GetHashCode();
        return hash;
      }
    }
  }
  public unsafe partial class EventOnImmunityEnd : EventBase {
    public new const Int32 ID = 9;
    public EntityRef kartEntity;
    protected EventOnImmunityEnd(Int32 id, EventFlags flags) : 
        base(id, flags) {
    }
    public EventOnImmunityEnd() : 
        base(9, EventFlags.Server|EventFlags.Client) {
    }
    public new QuantumGame Game {
      get {
        return (QuantumGame)base.Game;
      }
      set {
        base.Game = value;
      }
    }
    public override Int32 GetHashCode() {
      unchecked {
        var hash = 73;
        hash = hash * 31 + kartEntity.GetHashCode();
        return hash;
      }
    }
  }
  public unsafe partial class EventLocalPlayerReady : EventBase {
    public new const Int32 ID = 10;
    public PlayerRef player;
    public QBoolean ready;
    protected EventLocalPlayerReady(Int32 id, EventFlags flags) : 
        base(id, flags) {
    }
    public EventLocalPlayerReady() : 
        base(10, EventFlags.Server|EventFlags.Client) {
    }
    public new QuantumGame Game {
      get {
        return (QuantumGame)base.Game;
      }
      set {
        base.Game = value;
      }
    }
    public override Int32 GetHashCode() {
      unchecked {
        var hash = 79;
        hash = hash * 31 + player.GetHashCode();
        hash = hash * 31 + ready.GetHashCode();
        return hash;
      }
    }
  }
  public unsafe partial class EventOnRaceStateChanged : EventBase {
    public new const Int32 ID = 11;
    public RaceState state;
    protected EventOnRaceStateChanged(Int32 id, EventFlags flags) : 
        base(id, flags) {
    }
    public EventOnRaceStateChanged() : 
        base(11, EventFlags.Server|EventFlags.Client|EventFlags.Synced) {
    }
    public new QuantumGame Game {
      get {
        return (QuantumGame)base.Game;
      }
      set {
        base.Game = value;
      }
    }
    public override Int32 GetHashCode() {
      unchecked {
        var hash = 83;
        hash = hash * 31 + state.GetHashCode();
        return hash;
      }
    }
  }
  public unsafe partial class EventOnCountdownStart : EventBase {
    public new const Int32 ID = 12;
    public FP Time;
    protected EventOnCountdownStart(Int32 id, EventFlags flags) : 
        base(id, flags) {
    }
    public EventOnCountdownStart() : 
        base(12, EventFlags.Server|EventFlags.Client|EventFlags.Synced) {
    }
    public new QuantumGame Game {
      get {
        return (QuantumGame)base.Game;
      }
      set {
        base.Game = value;
      }
    }
    public override Int32 GetHashCode() {
      unchecked {
        var hash = 89;
        hash = hash * 31 + Time.GetHashCode();
        return hash;
      }
    }
  }
  public unsafe partial class EventOnRaceStart : EventBase {
    public new const Int32 ID = 13;
    protected EventOnRaceStart(Int32 id, EventFlags flags) : 
        base(id, flags) {
    }
    public EventOnRaceStart() : 
        base(13, EventFlags.Server|EventFlags.Client|EventFlags.Synced) {
    }
    public new QuantumGame Game {
      get {
        return (QuantumGame)base.Game;
      }
      set {
        base.Game = value;
      }
    }
    public override Int32 GetHashCode() {
      unchecked {
        var hash = 97;
        return hash;
      }
    }
  }
  public unsafe partial class EventOnFirstPlayerFinish : EventBase {
    public new const Int32 ID = 14;
    public EntityRef entityRef;
    protected EventOnFirstPlayerFinish(Int32 id, EventFlags flags) : 
        base(id, flags) {
    }
    public EventOnFirstPlayerFinish() : 
        base(14, EventFlags.Server|EventFlags.Client|EventFlags.Synced) {
    }
    public new QuantumGame Game {
      get {
        return (QuantumGame)base.Game;
      }
      set {
        base.Game = value;
      }
    }
    public override Int32 GetHashCode() {
      unchecked {
        var hash = 101;
        hash = hash * 31 + entityRef.GetHashCode();
        return hash;
      }
    }
  }
  public unsafe partial class EventOnRaceOver : EventBase {
    public new const Int32 ID = 15;
    protected EventOnRaceOver(Int32 id, EventFlags flags) : 
        base(id, flags) {
    }
    public EventOnRaceOver() : 
        base(15, EventFlags.Server|EventFlags.Client|EventFlags.Synced) {
    }
    public new QuantumGame Game {
      get {
        return (QuantumGame)base.Game;
      }
      set {
        base.Game = value;
      }
    }
    public override Int32 GetHashCode() {
      unchecked {
        var hash = 103;
        return hash;
      }
    }
  }
  public unsafe partial class EventOnPositionsUpdated : EventBase {
    public new const Int32 ID = 16;
    protected EventOnPositionsUpdated(Int32 id, EventFlags flags) : 
        base(id, flags) {
    }
    public EventOnPositionsUpdated() : 
        base(16, EventFlags.Server|EventFlags.Client|EventFlags.Synced) {
    }
    public new QuantumGame Game {
      get {
        return (QuantumGame)base.Game;
      }
      set {
        base.Game = value;
      }
    }
    public override Int32 GetHashCode() {
      unchecked {
        var hash = 107;
        return hash;
      }
    }
  }
  public unsafe partial class EventOnPlayerCompletedLap : EventBase {
    public new const Int32 ID = 17;
    public EntityRef entityRef;
    protected EventOnPlayerCompletedLap(Int32 id, EventFlags flags) : 
        base(id, flags) {
    }
    public EventOnPlayerCompletedLap() : 
        base(17, EventFlags.Server|EventFlags.Client|EventFlags.Synced) {
    }
    public new QuantumGame Game {
      get {
        return (QuantumGame)base.Game;
      }
      set {
        base.Game = value;
      }
    }
    public override Int32 GetHashCode() {
      unchecked {
        var hash = 109;
        hash = hash * 31 + entityRef.GetHashCode();
        return hash;
      }
    }
  }
  public unsafe partial class EventOnPlayerFinished : EventBase {
    public new const Int32 ID = 18;
    public EntityRef entityRef;
    protected EventOnPlayerFinished(Int32 id, EventFlags flags) : 
        base(id, flags) {
    }
    public EventOnPlayerFinished() : 
        base(18, EventFlags.Server|EventFlags.Client|EventFlags.Synced) {
    }
    public new QuantumGame Game {
      get {
        return (QuantumGame)base.Game;
      }
      set {
        base.Game = value;
      }
    }
    public override Int32 GetHashCode() {
      unchecked {
        var hash = 113;
        hash = hash * 31 + entityRef.GetHashCode();
        return hash;
      }
    }
  }
  public unsafe partial class EventOnWrongWayChanged : EventBase {
    public new const Int32 ID = 19;
    public PlayerRef player;
    public QBoolean wrongWay;
    protected EventOnWrongWayChanged(Int32 id, EventFlags flags) : 
        base(id, flags) {
    }
    public EventOnWrongWayChanged() : 
        base(19, EventFlags.Server|EventFlags.Client) {
    }
    public new QuantumGame Game {
      get {
        return (QuantumGame)base.Game;
      }
      set {
        base.Game = value;
      }
    }
    public override Int32 GetHashCode() {
      unchecked {
        var hash = 127;
        hash = hash * 31 + player.GetHashCode();
        hash = hash * 31 + wrongWay.GetHashCode();
        return hash;
      }
    }
  }
}
#pragma warning restore 0109
#pragma warning restore 1591
